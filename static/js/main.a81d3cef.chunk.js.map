{"version":3,"sources":["components/Card/index.js","components/CardWrapper/index.js","components/Wrapper/index.js","components/Score/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","handleClick","id","alt","name","src","image","CardWrapper","children","Wrapper","Score","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","score","highScore","playedCards","message","App","state","cards","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","includes","push","setState","this","map","cardData","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gqEAgBeA,MAbf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,yBACEA,UAAU,gBACVC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,MAEvC,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,MCH1BC,MAJf,SAAqBT,GACnB,OAAO,yBAAKC,UAAU,eAAeD,EAAMU,W,MCG9BC,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MC0B1BE,MA3Bf,SAAeZ,GACb,OACE,yBAAKa,MAAM,iDACT,yBAAKA,MAAM,gBAAX,UACA,4BACEA,MAAM,iBACNC,KAAK,SACLC,cAAY,WACZC,cAAY,cACZC,gBAAc,aACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMN,MAAM,yBAEd,yBAAKA,MAAM,2BAA2BT,GAAG,cACvC,yBAAKS,MAAM,qBAAX,UAAuCb,EAAMoB,OAC7C,yBAAKP,MAAM,eAAX,eAAsCb,EAAMqB,c,OCVhDC,G,MAAc,IACdF,EAAQ,EACRC,EAAY,EACZE,EAAU,GAsECC,E,2MAnEbC,MAAQ,CACNC,QACAJ,cACAF,QACAC,YACAE,W,EAIFI,QAAU,SAAAC,GAMR,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,G,EAGTzB,YAAc,SAAAC,GACRkB,EAAYc,SAAShC,IACvBgB,EAAQ,EACRG,EAAU,2BACVD,EAAc,KAEdA,EAAYe,KAAKjC,IACjBgB,GAAS,GACGC,IACVA,EAAYD,EACZG,EAAU,2BAId,EAAKI,QAAQD,GACb,EAAKY,SAAS,CAAEZ,QAAON,QAAOC,e,wEAGtB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOD,MAAOA,EAAOC,UAAWA,EAAWE,QAASA,IACpD,kBAAC,EAAD,KACGgB,KAAKd,MAAMC,MAAMc,IAAI,SAAAC,GAAQ,OAC5B,kBAAC,EAAD,CACEjC,MAAOiC,EAASjC,MAChBF,KAAMmC,EAASnC,KACfF,GAAIqC,EAASrC,GACbD,YAAa,EAAKA,gBANxB,U,GApDUuC,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a81d3cef.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card\">\n      <div\n        className=\"img-container\"\n        onClick={() => props.handleClick(props.id)}\n      >\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CardWrapper(props) {\n  return <div className=\"cardWrapper\">{props.children}</div>;\n}\n\nexport default CardWrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"Wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return (\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div class=\"navbar-brand\">Clicky</div>\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarText\"\n        aria-controls=\"navbarText\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"navbarText\">\n        <div class=\"navbar-text score\">Score: {props.score}</div>\n        <div class=\"navbar-text\">High Score: {props.highScore}</div>\n      </div>\n    </nav>\n    // <div className=\"scoreBanner\">\n    //   <h4></h4>\n    //   <h4>High Score: {props.highScore}</h4>\n    // </div>\n  );\n}\n\nexport default Score;\n","import React from \"react\";\nimport Card from \"./components/Card\";\nimport CardWrapper from \"./components/CardWrapper\";\nimport Wrapper from \"./components/Wrapper\";\n\nimport Score from \"./components/Score\";\n\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nlet playedCards = [];\nlet score = 0;\nlet highScore = 0;\nlet message = \"\";\n\nclass App extends React.Component {\n  state = {\n    cards,\n    playedCards,\n    score,\n    highScore,\n    message\n  };\n\n  //A function to shuffle the array that contains the card info\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  handleClick = id => {\n    if (playedCards.includes(id)) {\n      score = 0;\n      message = \"You guessed incorrectly!\";\n      playedCards = [];\n    } else {\n      playedCards.push(id);\n      score += 1;\n      if (score > highScore) {\n        highScore = score;\n        message = \"You guessed correctly!\";\n      }\n    }\n\n    this.shuffle(cards);\n    this.setState({ cards, score, highScore });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Score score={score} highScore={highScore} message={message} />\n        <CardWrapper>\n          {this.state.cards.map(cardData => (\n            <Card\n              image={cardData.image}\n              name={cardData.name}\n              id={cardData.id}\n              handleClick={this.handleClick}\n            />\n          ))}\n          ;\n        </CardWrapper>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}